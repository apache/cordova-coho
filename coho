#!/usr/bin/env node
/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/

var fs = require('fs');
var optimist = require('optimist');
var path = require('path');
var shjs = require('shelljs');
var request = require('request');

var origWorkingDir = process.cwd();

var COMMON_RAT_EXCLUDES = [
    '*.wav',
    '*.webloc',
    '*jasmine-1.2.0*',
    '*.xcodeproj',
    '.*',
    '*-Info.plist',
    'VERSION',
    'node_modules',
    'thirdparty',
    'package.json',
    ];

var platformRepos = [
    {
        title: 'Android',
        id: 'android',
        repoName: 'cordova-android',
        jiraComponentName: 'Android',
        cordovaJsPaths: ['framework/assets/www/cordova.js'],
        ratExcludes: [
            '*.properties',
            'bin',
            'gen',
            'proguard-project.txt'
        ]
    }, {
        title: 'iOS',
        id: 'ios',
        repoName: 'cordova-ios',
        jiraComponentName: 'iOS',
        cordovaJsPaths: ['CordovaLib/cordova.js'],
        versionFilePaths: [path.join('CordovaLib', 'VERSION')]
    }, {
        title: 'BlackBerry',
        id: 'blackberry',
        repoName: 'cordova-blackberry',
        jiraComponentName: 'BlackBerry',
        cordovaJsPaths: [
            path.join('bbos', 'javascript', 'cordova.blackberry.js'),
            path.join('playbook', 'javascript', 'cordova.blackberry.js'),
            // bb10 JS path uses a different src, so logic is hardcoded below.
            ],
        versionFilePaths: [
            path.join('bbos', 'VERSION'),
            path.join('bbos', 'bin', 'templates', 'project', 'www', 'VERSION'),
            path.join('blackberry10', 'VERSION'),
            path.join('blackberry10', 'bin', 'templates', 'project', 'www', 'VERSION'),
            path.join('playbook', 'VERSION'),
            path.join('playbook', 'bin', 'templates', 'project', 'www', 'VERSION'),
            ]
    }, {
        title: 'Windows',
        id: 'windows',
        repoName: 'cordova-windows',
        jiraComponentName: 'Windows 8',
        cordovaJsSrcName: 'cordova.windows8.js',
        cordovaJsPaths: ['windows8/cordova.js', 'windows8/template/www/cordova.js'],
        versionFilePaths: [path.join('windows8', 'VERSION'), path.join('windows8', 'template', 'VERSION')],
        inactive: true
    }, {
        title: 'Windows Phone 8',
        id: 'wp8',
        repoName: 'cordova-wp8',
        jiraComponentName: 'WP8',
        cordovaJsSrcName: 'cordova.windowsphone.js',
        cordovaJsPaths: ['common/www/cordova.js']
    }, {
        title: 'Mac OSX',
        id: 'osx',
        repoName: 'cordova-osx',
        jiraComponentName: 'OSX',
        cordovaJsPaths: ['CordovaFramework/cordova.js']
    }, {
        title: 'Bada',
        id: 'bada',
        repoName: 'cordova-bada',
        jiraComponentName: 'Bada',
        inactive: true
    }, {
        title: 'Bada WAC',
        id: 'bada-wac',
        repoName: 'cordova-bada-wac',
        jiraComponentName: 'Bada',
        inactive: true
    }, {
        title: 'WebOS',
        id: 'webos',
        repoName: 'cordova-webos',
        jiraComponentName: 'webOS',
        inactive: true
    }, {
        title: 'QT',
        id: 'qt',
        repoName: 'cordova-qt',
        jiraComponentName: 'Qt',
        inactive: true
    }, {
        title: 'Tizen',
        id: 'tizen',
        repoName: 'cordova-tizen',
        jiraComponentName: 'Tizen',
        inactive: true
    }
];

var nonPlatformRepos = [
    {
        title: 'Docs',
        id: 'docs',
        repoName: 'cordova-docs',
        jiraComponentName: 'Docs'
    }, {
        title: 'MobileSpec',
        id: 'mobile-spec',
        repoName: 'cordova-mobile-spec',
        jiraComponentName: 'mobile-spec',
        ratExcludes: [
          'jasmine.*',
          'html',
          'uubench.js',
        ]
    }, {
        title: 'Cordova JS',
        id: 'js',
        repoName: 'cordova-js',
        jiraComponentName: 'CordovaJS'
    }, {
        title: 'Hello World App',
        id: 'app-hello-world',
        repoName: 'cordova-app-hello-world',
        jiraComponentName: 'App Hello World'
    }
];

var pluginRepos = [
    {
        title: 'Plugin - Battery Status',
        id: 'plugin-battery-status',
        repoName: 'cordova-plugin-battery-status',
        jiraComponentName: 'Plugin Battery Status',
        inactive: false 
    }, {
        title: 'Plugin - Camera',
        id: 'plugin-camera',
        repoName: 'cordova-plugin-camera',
        jiraComponentName: 'Plugin Camera',
        inactive: false
    }, {
        title: 'Plugin - Console',
        id: 'plugin-console',
        repoName: 'cordova-plugin-console',
        jiraComponentName: 'Plugin Console',
        inactive: false 
    }, {
        title: 'Plugin - Contacts',
        id: 'plugin-contacts',
        repoName: 'cordova-plugin-contacts',
        jiraComponentName: 'Plugin Contacts',
        inactive: false
    }, {
        title: 'Plugin - Device Motion',
        id: 'plugin-device-motion',
        repoName: 'cordova-plugin-device-motion',
        jiraComponentName: 'Plugin Device Motion',
        inactive: false
    }, {
        title: 'Plugin - Device Orientation',
        id: 'plugin-device-orientation',
        repoName: 'cordova-plugin-device-orientation',
        jiraComponentName: 'Plugin Device Orientation',
        inactive: false
    }, {
        title: 'Plugin - Device',
        id: 'plugin-device',
        repoName: 'cordova-plugin-device',
        jiraComponentName: 'Plugin Device',
        inactive: false
    }, {
        title: 'Plugin - Dialogs',
        id: 'plugin-dialogs',
        repoName: 'cordova-plugin-dialogs',
        jiraComponentName: 'Plugin Dialogs',
        inactive: false
    }, {
        title: 'Plugin - File Transfer',
        id: 'plugin-file-transfer',
        repoName: 'cordova-plugin-file-transfer',
        jiraComponentName: 'Plugin File Transfer',
        inactive: false
    }, {
        title: 'Plugin - File',
        id: 'plugin-file',
        repoName: 'cordova-plugin-file',
        jiraComponentName: 'Plugin File',
        inactive: false
    }, {
        title: 'Plugin - Geolocation',
        id: 'plugin-geolocation',
        repoName: 'cordova-plugin-geolocation',
        jiraComponentName: 'Plugin Geolocation',
        inactive: false
    }, {
        title: 'Plugin - Globalization',
        id: 'plugin-globalization',
        repoName: 'cordova-plugin-globalization',
        jiraComponentName: 'Plugin Globalization',
        inactive: false
    }, {
        title: 'Plugin - InAppBrowser',
        id: 'plugin-inappbrowser',
        repoName: 'cordova-plugin-inappbrowser',
        jiraComponentName: 'Plugin InAppBrowser',
        inactive: false
    }, {
        title: 'Plugin - Media',
        id: 'plugin-media',
        repoName: 'cordova-plugin-media',
        jiraComponentName: 'Plugin Media',
        inactive: false
    }, {
        title: 'Plugin - Media Capture',
        id: 'plugin-media-capture',
        repoName: 'cordova-plugin-media-capture',
        jiraComponentName: 'Plugin Media Capture',
        inactive: false
    }, {
        title: 'Plugin - Network Information',
        id: 'plugin-network-information',
        repoName: 'cordova-plugin-network-information',
        jiraComponentName: 'Plugin Network Information',
        inactive: false
    }, {
        title: 'Plugin - Splash Screen',
        id: 'plugin-splashscreen',
        repoName: 'cordova-plugin-splashscreen',
        jiraComponentName: 'Plugin SplashScreen',
        inactive: false
    }, {
        title: 'Plugin - Vibration',
        id: 'plugin-vibration',
        repoName: 'cordova-plugin-vibration',
        jiraComponentName: 'Plugin Vibration',
        inactive: false
    }
];

var otherRepos = [
    {
        title: 'Cordova CLI',
        id: 'cli',
        repoName: 'cordova-cli',
        jiraComponentName: 'CLI',
        inactive: false, // Not on the same release schedule as the rest of Cordova
    }, {
        title: 'Cordova Plugman',
        id: 'plugman',
        repoName: 'cordova-plugman',
        jiraComponentName: 'Plugman',
        inactive: true, // Not on the same release schedule as the rest of Cordova
    }, {
        title: 'Cordova App Harness',
        id: 'app-harness',
        repoName: 'cordova-app-harness',
        inactive: true, // Not on the same release schedule as the rest of Cordova
    }, {
        title: 'Cordova Coho',
        id: 'coho',
        repoName: 'cordova-coho',
        jiraComponentName: 'Coho',
        inactive: true, // Not on the same release schedule as the rest of Cordova
    }
];

var allRepos = platformRepos.concat(nonPlatformRepos).concat(pluginRepos).concat(otherRepos);

var repoGroups = {
    'all': allRepos,
    'active': allRepos.filter(function(r) { return !r.inactive }),
    'auto': computeExistingRepos(),
    'inactive': allRepos.filter(function(r) { return r.inactive }),
    'platform': platformRepos,
    'plugins': pluginRepos,
    'active-platform': platformRepos.filter(function(r) { return !r.inactive }),
};

var gitCommitCount = 0;

var JIRA_API_URL = "https://issues.apache.org/jira/rest/api/latest/";
var JIRA_PROJECT_KEY = "CB";

function reportGitPushResult() {
    print('');
    if (gitCommitCount) {
        print('All work complete. ' + gitCommitCount + ' commits were made locally.');
        print('To review changes:');
        print('  ' + process.argv[1] + ' repo-status -r auto');
        print('To push changes:');
        print('  ' + process.argv[1] + ' repo-push -r auto');
        print('To revert all local commits:');
        print('  ' + process.argv[1] + ' repo-reset -r auto');
    } else {
        print('All work complete. No commits were made.');
    }
}

function print() {
    var newArgs = Array.prototype.slice.call(arguments);
    if (newArgs.length > 1 || newArgs[0]) {
        newArgs.unshift('====');
        newArgs = newArgs.map(function(val) { return val.replace(/\n/g, '\n==== ') });
    }

    console.log.apply(console, newArgs);
}

function fatal() {
    console.error.apply(console, arguments);
    process.exit(1);
}

function getVersionBranchName(version) {
    return version.replace(/\d+(-?rc\d)?$/, 'x');
}

function validateVersionString(version, opt_allowNonSemver) {
    var pattern = opt_allowNonSemver ? /^\d+\.\d+\.\d+(-?rc\d)?$/ : /^\d+\.\d+\.\d+(-rc\d)?$/;
    if (!pattern.test(version)) {
        fatal('Versions must be in the form #.#.#-[rc#]');
    }
    return version;
}

function registerRepoFlag(opt) {
    return opt.options('r', {
        alias: 'repo',
        desc: 'Which repos to operate on. Multiple flags allowed. This can be repo IDs or repo groups. Use the list-repos command see valid values.',
        default: 'auto'
    });
}

function registerHelpFlag(opt) {
    return opt.options('h', {
        alias: 'help',
        desc: 'Shows help information.'
    });
}

var lastLoggedDir = null;
function logCwd() {
    var curDir = process.cwd();
    if (curDir != lastLoggedDir) {
        lastLoggedDir = curDir;
        var relPath = path.relative(origWorkingDir, curDir);
        if (relPath) {
            print('Changed directory to: ' + relPath);
        }
    }
}

function execHelper(cmd, silent, allowError) {
    // Don't allow failure if being silent.
    allowError = allowError || silent;
    if (/^git commit/.exec(cmd)) {
        gitCommitCount++;
    }
    if (!silent) {
        logCwd();
        print('Executing command:', cmd);
    }
    var result = shjs.exec(cmd, {silent: (silent && silent !== 2)});
    if (result.code) {
        if (allowError) {
            return null;
        }
        process.exit(2);
    }
    return result.output.trim();
}

function cpAndLog(src, dest) {
    print('Coping File:', src, '->', dest);
    // Throws upon failure.
    shjs.cp('-f', src, dest);
    if (shjs.error()) {
        fatal('Copy failed.');
    }
}

function gitCheckout(branchName) {
    var curBranch = retrieveCurrentBranchName();
    if (curBranch != branchName) {
        execHelper('git checkout ' + branchName);
    }
}

var isInForEachRepoFunction = false;

function forEachRepo(repos, func) {
    repos.forEach(function(repo) {
        var origPath = isInForEachRepoFunction ? process.cwd() : '..';
        var newPath = isInForEachRepoFunction ? path.join('..', repo.repoName) : repo.repoName;

        isInForEachRepoFunction = true;
        shjs.cd(newPath);
        if (shjs.error()) {
            fatal('Repo directory does not exist: ' + repo.repoName + '. First run coho repo-clone.');
        }
        func(repo);
        shjs.cd(origPath);

        isInForEachRepoFunction = origPath != '..';
    });
}

function getRepoById(id, opt_repos) {
    var repos = opt_repos || allRepos;
    for (var i = 0; i < repos.length; ++i) {
        if (repos[i].id == id) {
            return repos[i];
        }
    }
    return null;
}

function createRepoUrl(repo) {
    return 'https://git-wip-us.apache.org/repos/asf/' + repo.repoName + '.git';
}

function createReleaseCommand(argv) {
    var opt = registerRepoFlag(optimist)
    opt = opt
        .options('new-version', {
            desc: 'The version to release. E.g. 2.7.1-rc2',
            demand: true
         })
        .options('prev-version', {
            desc: 'The previous release version (used to create changelog)',
            demand: true
         })
        .options('update', {
            type: 'boolean',
            desc: 'Use --no-update to skip the "git fetch" step.',
            default: true
         })
        .options('sign', {
            type: 'boolean',
            desc: 'Use --no-sign to skip the final zip+pgp signing step.',
            default: true
         });
    opt = registerHelpFlag(opt);
    var argv = opt
        .usage('Clones all necessary repositories, and then stages the release.\n' +
               'This involves:\n' +
               '    Cloning all repositories that are not already cloned.\n' +
               '    Updating all of them via git fetch\n' +
               '    Zipping them up\n' +
               '    Adding in extra release files\n' +
               '    Zipping up all files + zips into a master zip\n' +
               '    Signing the master zip via pgp\n' +
               '\n' +
               'Usage: $0 create-release-snapshot')
        .argv;

    if (argv.h) {
        optimist.showHelp();
        process.exit(1);
    }
    var repos = computeReposFromFlag(argv.r);
    var prevVersion = validateVersionString(argv['prev-version'], true);
    var newVersion = validateVersionString(argv['new-version']);

    // Ensure we can find the path to the coho repo.
    var scriptPath = path.dirname(process.argv[1]);
    var keysPath = path.join(scriptPath, 'KEYS');
    var binPath = path.join(scriptPath, 'bin');
    if (!shjs.test('-f', keysPath)) {
        fatal('Expected path to exist: ' + keysPath);
    }
    if (!shjs.test('-d', binPath)) {
        fatal('Expected path to exist: ' + binPath);
    }

    cloneRepos(repos,false);
    if (argv.update) {
        // No need to update branches, just do a git fetch --tags.
        updateRepos(repos, [], false);
    }

    // Check that the version tags exist.
    forEachRepo(repos, function(repo) {
        if (!tagExists(prevVersion)) {
            fatal('Tag "' + prevVersion + '" does not exist in repo ' + repo.repoName);
        }
        if (!tagExists(newVersion)) {
            fatal('Tag "' + newVersion + '" does not exist in repo ' + repo.repoName);
        }
    });

    var releaseDir = path.join('releases', 'cordova-' + newVersion);
    var destDir = path.join(releaseDir, 'cordova-' + newVersion);
    shjs.rm('-rf', releaseDir);
    shjs.mkdir('-p', destDir);

    // Create zips.
    forEachRepo(repos, function(repo) {
        var zipPath = path.join('..', destDir, repo.repoName + '.zip');
        if (shjs.test('-f', zipPath)) {
            print('Skipping zip (already exists):', zipPath);
        } else {
            execHelper('git archive --format zip -o "' + zipPath + '" ' + newVersion);
        }
    });

    cpAndLog(keysPath, path.join(releaseDir, 'KEYS'));
    cpAndLog(path.join(binPath, '*'), destDir);

    print('Generating change logs...');
    var changeLogData = 'Cordova Commits from ' + prevVersion + ' -> ' + newVersion + '\n';
    forEachRepo(repos, function(repo) {
        changeLogData += '\n' + repo.repoName + '\n---\n';
        changeLogData += execHelper('git log --no-merges --format="%h %s" ' + prevVersion + '..' + newVersion, true);
    });
    fs.writeFileSync(path.join(destDir, 'changelog'), changeLogData);
    print('Generating final zip...');

    var cordovaSrcZip  = 'cordova-' + newVersion + '-src.zip';
    var cordovaSrcSha  = cordovaSrcZip + '.sha';

    shjs.rm('-f', path.join(releaseDir, cordovaSrcZip + '*'));
    var oldDir = shjs.pwd();
    shjs.cd(releaseDir);
    execHelper('zip -rq ' + cordovaSrcZip + ' cordova-' + newVersion);
    execHelper('gpg --armor --detach-sig --output ' + cordovaSrcZip + '.asc ' + cordovaSrcZip);
    fs.writeFileSync(cordovaSrcZip + '.md5', execHelper('gpg --print-md MD5 ' + cordovaSrcZip));
    fs.writeFileSync(cordovaSrcZip + '.sha', execHelper('gpg --print-md SHA512 ' + cordovaSrcZip));
    print('Final product is ready at:', path.join(releaseDir, cordovaSrcZip));
    shjs.cd(oldDir);
    process.exit(0);
}

function apacheUpload(){
    var opt = registerRepoFlag(optimist)
    opt = opt
        .options('new-version', {
            desc: 'The version to release. E.g. 3.0.0',
            demand: true
         })
        .options('prev-version', {
            desc: 'The previous release version (used to remove old version from download page)',
            demand: false
         });
    
    opt = registerHelpFlag(opt);
    var argv = opt
        .usage('Uploads the release to the apache servers and optionally removes previous release files.\n' +
            'This involves:\n' +
            '    Checking out Apache Cordova release repository if it does not already exist.\n' +
            '    Updating the repositoryvia svn update\n' +
            '    Optionally removing old release artifacts\n' +
            '    Copying in new relase artifacts\n' +
            '    Svn committing new release artifacts to the apache repo\n' +
            '\n' +
            'Usage: $0 upload-release --new-version 3.0.0 [--prev-version 2.9.0]')
        .argv;
    
    if (argv.h) {
        optimist.showHelp();
        process.exit(1);
    }
    
    if (shjs.test('-d','./apachecordova')){
        print('apachecordova directory exists');
        execHelper("cd apachecordova && svn update");

    } else {
        //grab apachecordova repo off apache svn servers
        execHelper("svn checkout https://dist.apache.org/repos/dist/release/cordova apachecordova")
    }

    if (argv['prev-version'] && shjs.test('-d','./apachecordova/cordova-'+argv['prev-version']+'-src.zip')){
        //remove old version
        print('removing previous release from apache servers')
        execHelper("cd apachecordova && svn delete cordova-"+argv['prev-version']+"-src.*");
    }
    
    print('copy over and commit new release files')
    execHelper("cp -r releases/cordova-"+argv['new-version']+"/cordova-"+argv['new-version']+"-src* apachecordova/");
    execHelper("cd apachecordova && svn add *");
    print("svn commit -m 'updated to "+argv['new-version']+"'")
    execHelper("cd apachecordova && svn commit -m 'updated to "+opt.argv['new-version']+"'");
}

function computeReposFromFlag(flagValue) {
    var values = Array.isArray(flagValue) ? flagValue : [flagValue];
    var ret = [];
    var addedIds = {};
    function addRepo(repo) {
        if (!addedIds[repo.id]) {
            addedIds[repo.id] = true;
            ret.push(repo);
        }
    }
    values.forEach(function(value) {
        var repo = getRepoById(value);
        var group = repoGroups[value];
        if (repo) {
            addRepo(repo);
        } else if (group) {
            group.forEach(addRepo);
        } else {
            fatal('Invalid repo value: ' + value + '\nUse the list-repos command to see value values.');
        }
    });
    return ret;
}

function computeExistingRepos() {
    return allRepos.filter(function(repo) {
        return shjs.test('-d', repo.repoName);
    });
}

function localBranchExists(name) {
    return !!execHelper('git branch --list ' + name, true);
}

function remoteBranchExists(repo, name) {
    return !!execHelper('git branch -r --list ' + repo.remoteName + '/' + name, true);
}

function retrieveCurrentBranchName() {
    var ref = execHelper('git symbolic-ref HEAD', true, true);
    if (!ref) {
        throw new Error('Aborted due to repo ' + shjs.pwd() + ' not being on a named branch');
    }
    var match = /refs\/heads\/(.*)/.exec(ref);
    if (!match) {
        throw new Error('Could not parse branch name from: ' + ref);
    }
    return match[1];
}

function retrieveCurrentTagName() {
    // This will return the tag name plus commit info it not directly at a tag.
    // That's fine since all users of this function are meant to use the result
    // in an equality check.
    return execHelper('git describe --tags HEAD', true, true);
}

function tagExists(tagName) {
    return !!execHelper('git tag --list ' + tagName, true);
}

function listReposCommand(argv) {
    print('Valid values for the --repo flag:');
    print('');
    print('Repositories:');
    allRepos.forEach(function(repo) {
        print('    ' + repo.id);
    });
    print('');
    print('Repository Groups:');
    var groupNames = Object.keys(repoGroups);
    groupNames.sort();
    groupNames.forEach(function(groupName) {
        print('    ' + groupName + ' (' + repoGroups[groupName].map(function(repo) { return repo.id }).join(', ') + ')');
    });
    process.exit(0);
}

function repoCloneCommand(argv) {
    var opt = registerRepoFlag(optimist)
    opt = registerHelpFlag(opt);
    var argv = opt
        .usage('Clones git repositories into the current working directory. If the repositories are already cloned, then this is a no-op.\n\n' +
               'Usage: $0 clone --repo=name [--repo=othername]')
        .argv;

    if (argv.h) {
        optimist.showHelp();
        process.exit(1);
    }
    var repos = computeReposFromFlag(argv.r);
    cloneRepos(repos, false);
    process.exit(0);
}

function cloneRepos(repos, quiet) {
    var failures = [];
    var numSkipped = 0;

    repos.forEach(function(repo) {
        if (shjs.test('-d', repo.repoName)) {
            if(!quiet) print('Repo already cloned: ' + repo.repoName);
            numSkipped +=1 ;
        } else {
            var code = shjs.exec('git clone --progress ' + createRepoUrl(repo)).code;
            if (code) {
                failures.push(repo.repoName);
            }
        }
    });

    var numCloned = repos.length - failures.length - numSkipped;
    if (numCloned) {
        print('Successfully cloned ' + numCloned + ' repositories.');
    }
    if (failures.length) {
        fatal('The following repositories failed to clone: ' + failures.join(', '));
    }
}

function repoStatusCommand(argv) {
    var opt = registerRepoFlag(optimist)
    var opt = optimist
        .options('b', {
            alias: 'branch',
            desc: 'The name of the branch to report on. Can be specified multiple times to specify multiple branches.',
            default: 'master'
         });
    opt = registerHelpFlag(opt);
    var argv = opt
        .usage('Reports what changes exist locally that are not yet pushed.\n' +
               '\n' +
               'Usage: $0 repo-status -r auto -b master -b 2.9.x')
        .argv;

    if (argv.h) {
        optimist.showHelp();
        process.exit(1);
    }
    var branches = Array.isArray(argv.b) ? argv.b : [argv.b];
    var repos = computeReposFromFlag(argv.r);

    var logs = '';
    var diffs = '';

    forEachRepo(repos, function(repo) {
        // Determine remote name.
        updateRepos([repo], [], true);
        branches.forEach(function(branchName) {
            if (!localBranchExists(branchName)) {
                return;
            }
            gitCheckout(branchName);
            var targetBranch = remoteBranchExists(repo, branchName) ? branchName : 'master';
            var changes = execHelper('git log --oneline ' + repo.remoteName + '/' + targetBranch + '..' + branchName, true);
            if (changes) {
                logs += repo.repoName + ' on branch ' + branchName + ': Local commits exist.\n';
                logs += changes + '\n';
                diffs += 'Diff for for ' + repo.repoName + ' on branch ' + branchName + ' (truncated):\n';
                diffs += execHelper('git diff ' + repo.remoteName + '/' + targetBranch + '..' + branchName, true).split('\n').slice(0, 30).join('\n');
                diffs += '\n\n';
            } else {
                logs += repo.repoName + ' on branch ' + branchName + ': No local commits\n';
            }
        });
    });
    print('\n\n');
    print(logs);
    print(diffs);
}

function repoResetCommand(argv) {
    var opt = registerRepoFlag(optimist)
    var opt = optimist
        .options('b', {
            alias: 'branch',
            desc: 'The name of the branch to reset. Can be specified multiple times to specify multiple branches.',
            default: 'master'
         });
    opt = registerHelpFlag(opt);
    var argv = opt
        .usage('Resets repository branches to match their upstream state.\n' +
               'Performs the following commands on each:\n' +
               '    git reset --hard origin/$BRANCH_NAME\n' +
               '\n' +
               'Usage: $0 repo-reset -r auto -b master -b 2.9.x')
        .argv;

    if (argv.h) {
        optimist.showHelp();
        process.exit(1);
    }
    var branches = Array.isArray(argv.b) ? argv.b : [argv.b];
    var repos = computeReposFromFlag(argv.r);

    forEachRepo(repos, function(repo) {
        // Determine remote name.
        updateRepos([repo], [], true);
        stashAndPop(repo, function() {
            branches.forEach(function(branchName) {
                if (!localBranchExists(branchName)) {
                    return;
                }
                gitCheckout(branchName);
                var changes = execHelper('git log --oneline ' + repo.remoteName + '/' + branchName + '..' + branchName);
                if (changes) {
                    print(repo.repoName + ' on branch ' + branchName + ': Local commits exist. Resetting.\n');
                    execHelper('git reset --hard ' + repo.remoteName + '/' + branchName);
                } else {
                    print(repo.repoName + ' on branch ' + branchName + ': No local commits exist.\n');
                }
            });
        });
    });
}

function repoPushCommand(argv) {
    var opt = registerRepoFlag(optimist)
    var opt = optimist
        .options('b', {
            alias: 'branch',
            desc: 'The name of the branch to push. Can be specified multiple times to specify multiple branches.',
            default: 'master'
         });
    opt = registerHelpFlag(opt);
    var argv = opt
        .usage('Pushes changes to the remote repository.\n' +
               '\n' +
               'Usage: $0 repo-push -r auto -b master -b 2.9.x')
        .argv;

    if (argv.h) {
        optimist.showHelp();
        process.exit(1);
    }
    var branches = Array.isArray(argv.b) ? argv.b : [argv.b];
    var repos = computeReposFromFlag(argv.r);

    forEachRepo(repos, function(repo) {
        // Update first.
        updateRepos([repo], branches, false);
        branches.forEach(function(branchName) {
            if (!localBranchExists(branchName)) {
                return;
            }
            var isNewBranch = !remoteBranchExists(repo, branchName);

            gitCheckout(branchName);

            if (isNewBranch) {
                execHelper('git push --set-upstream ' + repo.remoteName + ' ' + branchName);
            } else {
                var changes = execHelper('git log --oneline ' + repo.remoteName + '/' + branchName + '..' + branchName, true);
                if (changes) {
                    execHelper('git push ' + repo.remoteName + ' ' + branchName);
                } else {
                    print(repo.repoName + ' on branch ' + branchName + ': No local commits exist.\n');
                }
            }
        });
    });
}

function repoPerformShellCommand(argv) {
    var opt = registerRepoFlag(optimist)
    opt = registerHelpFlag(opt);
    var argv = opt
        .usage('Performs the supplied shell command in each repo directory.\n' +
               '\n' +
               'Usage: $0 foreach "shell command"')
        .argv;

    if (argv.h) {
        optimist.showHelp();
        process.exit(1);
    }
    var repos = computeReposFromFlag(argv.r);
    var cmd = argv._[1];
    forEachRepo(repos, function(repo) {
         execHelper(cmd);
    });
    process.exit(0);
}

function repoUpdateCommand(argv) {
    var opt = registerRepoFlag(optimist)
    var opt = opt
        .options('b', {
            alias: 'branch',
            desc: 'The name of the branch to update. Can be specified multiple times to update multiple branches.',
            default: 'master'
         })
        .options('fetch', {
            type: 'boolean',
            desc: 'Use --no-fetch to skip the "git fetch" step.',
            default: true
         });
    opt = registerHelpFlag(opt);
    var argv = opt
        .usage('Updates git repositories by performing the following commands:\n' +
               '    save active branch\n' +
               '    git fetch $REMOTE \n' +
               '    git stash\n' +
               '    for each specified branch:\n' +
               '        git checkout $BRANCH\n' +
               '        git rebase $REMOTE/$BRANCH\n' +
               '        git checkout -\n' +
               '    git checkout $SAVED_ACTIVE_BRANCH\n' +
               '    git stash pop\n' +
               '\n' +
               'Usage: $0 repo-update')
        .argv;

    if (argv.h) {
        optimist.showHelp();
        process.exit(1);
    }
    var branches = Array.isArray(argv.b) ? argv.b : [argv.b];
    var repos = computeReposFromFlag(argv.r);

    // ensure that any missing repos are cloned
    cloneRepos(repos,true);
    updateRepos(repos, branches, !argv.fetch);
    process.exit(0);
}

function determineApacheRemote(repo) {
    var fields = execHelper('git remote -v', true).split(/\s+/);
    for (var i = 1; i < fields.length; i += 3) {
        if (fields[i].indexOf('git-wip-us.apache.org/repos/asf/' + repo.repoName) != -1) {
            return fields[i - 1];
        }
    }
    fatal('Could not find an apache remote for repo ' + repo.repoName);
}

function pendingChangesExist() {
    return !!execHelper('git status --porcelain', true);
}

function stashAndPop(repo, func) {
    var requiresStash = pendingChangesExist();

    if (requiresStash) {
        execHelper('git stash save --all --quiet "coho stash"');
    }

    func();

    if (requiresStash) {
        execHelper('git stash pop');
    }
}

function updateRepos(repos, branches, noFetch) {
    // Pre-fetch checks.
    forEachRepo(repos, function(repo) {
        // Ensure it's on a named branch.
        retrieveCurrentBranchName();
        // Find the apache remote.
        if (!repo.remoteName) {
            repo.remoteName = determineApacheRemote(repo);
        }
    });

    if (!noFetch) {
        forEachRepo(repos, function(repo) {
            // TODO - can these be combined? Fetching with --tags seems to not pull in changes...
            execHelper('git fetch --progress ' + repo.remoteName);
            execHelper('git fetch --progress --tags ' + repo.remoteName);
        });
    }

    if (branches && branches.length) {
        forEachRepo(repos, function(repo) {
            var staleBranches = branches.filter(function(branchName) {
                if (!remoteBranchExists(repo, branchName)) {
                    return false;
                }
                var changes = execHelper('git log --oneline ' + branchName + '..' + repo.remoteName + '/' + branchName, true, true);
                return !!changes;
            });
            if (!staleBranches.length) {
                print('Confirmed already up-to-date: ' + repo.repoName);
            } else {
                print('Updating ' + repo.repoName);
                stashAndPop(repo, function() {
                    staleBranches.forEach(function(branchName) {
                        gitCheckout(branchName);
                        execHelper('git rebase ' + repo.remoteName + '/' + branchName);
                    });
                });
            }
        });
    }
}

function configureReleaseCommandFlags(opt) {
    var opt = registerRepoFlag(opt)
    opt = opt
        .options('version', {
            desc: 'The version to use for the branch. Must match the pattern #.#.#[-rc#]',
            demand: true
         });
    opt = registerHelpFlag(opt);
    argv = opt.argv;

    if (argv.h) {
        optimist.showHelp();
        process.exit(1);
    }
    var version = validateVersionString(argv.version);
    return argv;
}

var hasBuiltJs = false;

function updateJsSnapshot(repo, version, branchName) {
    function ensureJsIsBuilt() {
        var cordovaJsRepo = getRepoById('js');
        if (!hasBuiltJs) {
            forEachRepo([cordovaJsRepo], function() {
                gitCheckout(getVersionBranchName(version));
                var actualCurTag = retrieveCurrentTagName();
                if (actualCurTag != version) {
                    fatal('Not preparing branches since cordova-js is not at the version tag. (it\'s at ' + actualCurTag + ')');
                }
                execHelper('grunt cordovajs');
                hasBuiltJs = true;
            });
        }
    }

    if (platformRepos.indexOf(repo) == -1) {
        return;
    }

    if (repo.cordovaJsPaths) {
        ensureJsIsBuilt();
        repo.cordovaJsPaths.forEach(function(jsPath) {
            var src = path.join('..', 'cordova-js', 'pkg', repo.cordovaJsSrcName || ('cordova.' + repo.id + '.js'));
            cpAndLog(src, jsPath);
        });
        // Extra bb10 logic
        if (repo.id == 'blackberry') {
            var src = path.join('..', 'cordova-js', 'pkg', 'cordova.blackberry10.js');
            cpAndLog(src, path.join('blackberry10', 'javascript', 'cordova.blackberry10.js'));
        }
        if (pendingChangesExist()) {
            execHelper('git commit -am "Update JS snapshot to version ' + version + ' (via coho)"');
        }
    } else if (allRepos.indexOf(repo) != -1) {
        print('*** DO NOT KNOW HOW TO UPDATE cordova.js FOR THIS REPO ***');
    }
}

function prepareReleaseBranchCommand() {
    var argv = configureReleaseCommandFlags(optimist
        .usage('Prepares release branches but does not create tags. This includes:\n' +
               '    1. Creating the branch if it doesn\'t already exist\n' +
               '    2. Updating cordova.js snapshot and VERSION file.\n' +
               '\n' +
               'Command is safe to run multiple times, and can be run for the purpose\n' +
               'of checking out existing release branches.\n' +
               '\n' +
               'Command can also be used to update the JS snapshot after release \n' +
               'branches have been created.\n' +
               '\n' +
               'Usage: $0 prepare-release-branch --version=2.8.0-rc1')
    );
    var repos = computeReposFromFlag(argv.r);
    var version = validateVersionString(argv.version);
    var branchName = getVersionBranchName(version);

    // First - perform precondition checks.
    updateRepos(repos, [], true);

    var cordovaJsRepo = getRepoById('js');

    // Ensure cordova-js comes first.
    var repoIndex = repos.indexOf(cordovaJsRepo);
    if (repoIndex != -1) {
        repos.splice(repoIndex, 1);
        repos.unshift(cordovaJsRepo);
    }

    forEachRepo(repos, function(repo) {
        stashAndPop(repo, function() {
            // git fetch + update master
            updateRepos([repo], ['master'], false);
            gitCheckout('master');
            // Update JS on master.
            updateJsSnapshot(repo, version, 'master');

            // Either create or pull down the branch.
            if (remoteBranchExists(repo, branchName)) {
                print('Remote branch already exists for repo: ' + repo.repoName);
                // Check out and rebase.
                updateRepos([repo], [branchName], true);
                gitCheckout(branchName);
                // Update JS on branch.
                updateJsSnapshot(repo, version, branchName);
            } else {
                execHelper('git checkout -b ' + branchName);
            }
            // Update the VERSION files.
            var versionFilePaths = repo.versionFilePaths || ['VERSION'];
            if (fs.existsSync(versionFilePaths[0])) {
                print(repo.repoName + ': ' + 'Updating VERSION file.');
                versionFilePaths.forEach(function(versionFilePath) {
                    fs.writeFileSync(versionFilePath, version + '\n');
                });
                if (repo.id == 'android') {
                    shjs.sed('-i', /cordovaVersion.*=.*;/, 'cordovaVersion = "' + version + '";', path.join('framework', 'src', 'org', 'apache', 'cordova', 'Device.java'));
                }
                if (!pendingChangesExist()) {
                    print('VERSION file was already up-to-date.');
                }
            } else {
                console.warn('No VERSION file exists in repo ' + repo.repoName);
            }

            if (pendingChangesExist()) {
                execHelper('git commit -am "Set VERSION to ' + version + ' (via coho)"');
            }
        });
    });

    reportGitPushResult();
}

function tagReleaseBranchCommand(argv) {
    var argv = configureReleaseCommandFlags(optimist
        .usage('Tags a release branches.\n' +
               '\n' +
               'Usage: $0 tag-release --version=2.8.0-rc1')
        .options('pretend', {
            desc: 'Don\'t actually run git commands, just print out what would be run.',
         })
    );
    var repos = computeReposFromFlag(argv.r);
    var version = validateVersionString(argv.version);
    var pretend = argv.pretend;
    var branchName = getVersionBranchName(version);

    // First - perform precondition checks.
    updateRepos(repos, [], true);

    function execOrPretend(cmd) {
        if (pretend) {
            print('PRETENDING TO RUN: ' + cmd);
        } else {
            execHelper(cmd);
        }
    }
    forEachRepo(repos, function(repo) {
        stashAndPop(repo, function() {
            // git fetch.
            updateRepos([repo], [], false);

            if (remoteBranchExists(repo, branchName)) {
                print('Remote branch already exists for repo: ' + repo.repoName);
                gitCheckout(branchName);
            } else {
                fatal('Release branch does not exist for repo ' + repo.repoName);
            }

            // git merge
            updateRepos([repo], [branchName], true);

            // Create/update the tag.
            var tagName = retrieveCurrentTagName();
            if (tagName != version) {
                if (tagExists(version)) {
                    execOrPretend('git tag ' + version + ' --force');
                } else {
                    execOrPretend('git tag ' + version);
                }
                execOrPretend('git push --tags ' + repo.remoteName + ' ' + branchName);
            } else {
                print('Repo ' + repo.repoName + ' is already tagged.');
            }
        });
    });

    print('');
    print('All work complete.');
}

function ratCommand() {
    var opt = registerRepoFlag(optimist);
    opt = registerHelpFlag(opt);
    opt.usage('Uses Apache RAT to audit source files for license headers.\n' +
              '\n' +
              'Usage: $0 audit-license-headers --repo=ios')
    argv = opt.argv;

    if (argv.h) {
        optimist.showHelp();
        process.exit(1);
    }
    var repos = computeReposFromFlag(argv.r);
    // Check that RAT command exists.
    var ratPath = path.resolve(path.join(path.dirname(process.argv[1]), 'apache-rat-0.8', 'apache-rat-0.8.jar'));
    if (!fs.existsSync(ratPath)) {
        print('RAT tool not found, downloading to: ' + ratPath);
        forEachRepo([getRepoById('coho')], function() {
            if (shjs.which('curl')) {
                execHelper('curl "http://mirror.csclub.uwaterloo.ca/apache/incubator/rat/binaries/apache-rat-incubating-0.8-bin.tar.gz" | tar xz');
            } else {
                execHelper('wget -O - "http://mirror.csclub.uwaterloo.ca/apache/incubator/rat/binaries/apache-rat-incubating-0.8-bin.tar.gz" | tar xz');
            }
        });
        if (!fs.existsSync(ratPath)) {
            fatal('Download failed.');
        }
    }
    forEachRepo(repos, function(repo) {
        var allExcludes = COMMON_RAT_EXCLUDES;
        if (repo.ratExcludes) {
            allExcludes = allExcludes.concat(repo.ratExcludes);
        }
        var excludeFlags = '-e "' + allExcludes.join('" -e "') + '"';
        execHelper('java -jar "' + ratPath + '" -d . ' + excludeFlags);
    });
}

function sendCreateIssueRequest(issue, username, password, pretend, callback) {
    var auth = 'Basic ' + new Buffer(username + ':' + password).toString('base64');
    requestToSend = {
        'uri':JIRA_API_URL + 'issue',
        'headers':{
            'Authorization':auth
        },
        'json':issue
    };
    print('creating jira issue: ' + issue.fields.summary);
    if (!pretend) {
        request.post(requestToSend, callback);
    } else {
        print('sending request:');
        console.log(JSON.stringify(requestToSend, null, 2));
        callback(null, { 'statuscode':0 }, { 'key':'1234567' });
    }
}

function sendCreateSubtaskRequests(request_queue, username, password, pretend) {
    if (request_queue.length == 0) {
        return;
    }
    sendCreateIssueRequest(request_queue.shift(), username, password, pretend, function(err, res, body) {
        if (err) {
            print('there was an error creating subtask.');
        } else if (res.statuscode >= 400) {
            print('got http status ' + res.statuscode + ' during subtask creation.');
            print(body);
        } else {
            sendCreateSubtaskRequests(request_queue, username, password, pretend);
        }
    });
}

function makeSubtask(parent_key, summary, description, component_ids, version_id) {
    var components = [];
    component_ids.forEach(function(component_id) {
        components.push({'id':component_id});
    });
    return {
        'fields':{
            'project':{
                'key':JIRA_PROJECT_KEY
            },
            'parent':{
                'key':parent_key
            },
            'summary':summary,
            'description':description,
            'issuetype':{
                'name':'Sub-task'
            },
            'components':components,
            'fixVersions': [{
                'id':version_id
            }]
        },
    };
}

function createReleaseBug(version, root_version, prev_version, version_id, username, password, component_map, pretend) {
    var subjectPrefix = '[Release + ' + version + '] ';
    var workflow_link = 'Workflow here:\nhttp://wiki.apache.org/cordova/CuttingReleases';
    var parent_issue = {
        'fields':{
            'project':{
                'key':JIRA_PROJECT_KEY
            },
            'summary':subjectPrefix + 'Parent Issue',
            'description':'Parent bug for the ' + version + ' Cordova Release.\n\n' + workflow_link,
            'issuetype':{
                'name':'Task'
            },
            'fixVersions': [{
                'id':version_id
            }],
            'components': []
        }
    };
    var create_release_branches_description = workflow_link + '\n\n' +
        'Steps:\n' +
        '1. Create remote branches\n' +
        '2. Update all VERSION files\n\n' +
        'Both steps can be done via coho create-release-branch --version ' + version;
    var tag_description = workflow_link + '\n\n' +
        'Steps:\n' +
        '1. Update cordova.js snapshot to newly tagger version\n' +
        '2. Update snapshot of cordova-app-hello-world within create template (if its changed since previous release)\n' +
        '3. Run Apache RAT\n' +
        '4. Look through all open JIRA bugs targeted at the current version and either fix or postpone them.\n' +
        '5. Test (refer to http://wiki.apache.org/cordova/CuttingReleases#What_to_Test)\n' +
        '6. Tag (via coho)';
    var announce_description = workflow_link + '\n\n' +
        'Steps:\n' +
        '1. Create the .zip of the release candidate\n' +
        '2. Upload it to apache servers\n' +
        '3. Upload new docs snapshot (see Release wiki)\n' +
        '4. Update cordova.apache.org website with new release info (see Release wiki)\n' +
        '5. Wait 24 hours\n' +
        '6. Announce its availability to the mailing-list & blog about it.';
    var tagRepos = computeReposFromFlag('active');
    var upgradeGuideRepos = computeReposFromFlag('active-platform');
    var all_components = {};
    tagRepos.forEach(function(repo) {
        all_components[component_map[repo.jiraComponentName]] = null;
    });
    all_components = Object.keys(all_components);
    all_components.forEach(function(component_id) {
        parent_issue.fields.components.push({'id':component_id});
    });

    sendCreateIssueRequest(parent_issue, username, password, pretend, function(err, res, body) {
        if (err) {
            fatal('Error creating parent issue: ' + err);
        }
        var parent_key = body.key;
        if (!parent_key) {
            fatal('No ID retrieved for created parent issue. Aborting.');
        }
        var request_queue = [];
        request_queue.push(makeSubtask(parent_key, subjectPrefix + 'Create Release Branches',
                                       create_release_branches_description, all_components, version_id));
        tagRepos.forEach(function(repo) {
            if (!component_map[repo.jiraComponentName]) {
                print('Unable to find component ' + repo.jiraComponentName + ' in JIRA.');
                return;
            }
            request_queue.push(makeSubtask(parent_key, subjectPrefix + 'Tag ' + repo.title, tag_description,
                                           [component_map[repo.jiraComponentName]], version_id));
        });
        upgradeGuideRepos.forEach(function(repo) {
            if (!component_map[repo.jiraComponentName]) {
                print('Unable to find component ' + repo.jiraComponentName + ' in JIRA.');
                return;
            }
            request_queue.push(makeSubtask(parent_key,
                                           subjectPrefix + 'Update Upgrading Guide for ' + prev_version +
                                           ' -> ' + root_version + ' for ' + repo.title, '',
                                           [component_map[repo.jiraComponentName]], version_id));
        });
        request_queue.push(makeSubtask(parent_key, subjectPrefix + 'Announce Release Candidate',
                                       announce_description, all_components, version_id));
        sendCreateSubtaskRequests(request_queue, username, password, pretend);
    });
}

function createReleaseBugCommand() {
    var opt = registerHelpFlag(optimist);
    opt = opt.options('version', {
        desc: 'The version to use for the branch. Must match the pattern #.#.#[rc#]',
        demand: true
    }).options('username', {
        desc: 'Username to use when creating issues in JIRA',
        demand: true
    }).options('password', {
        desc: 'Password to use when creating issues in JIRA',
        demand: true
    }).options('pretend', {
        desc: 'Instead of creating issues in JIRA, print the issue creation requests that would have been sent instead'
    });
    opt.usage('Creates an issue in JIRA for releasing a new version of Cordova, including creating all subtasks.\n' +
              '\n' +
              'Usage: $0 create-release-bug --version=3.0.0-rc1 --username=Alice --password=Passw0rd');
    var argv = opt.argv;

    if (argv.h) {
        optimist.showHelp();
        process.exit(1);
    }
    var version = validateVersionString(argv.version);

    request.get(JIRA_API_URL + 'project/' + JIRA_PROJECT_KEY + '/components', function(err, res, components) {
        if (err) {
            fatal('Error getting components from JIRA: ' + err);
        } else if (!components) {
            fatal('Error: JIRA returned no components');
        }
        components = JSON.parse(components);
        var component_map = {};
        components.forEach(function(component) {
            component_map[component.name] = component.id;
        });

        request.get(JIRA_API_URL + 'project/' + JIRA_PROJECT_KEY + '/versions', function(err, res, versions) {
            if (err) {
                fatal('Error getting versions from JIRA: ' + err);
            } else if (!versions) {
                fatal('Error: JIRA returned no versions');
            }
            versions = JSON.parse(versions);
            var root_version = version;
            var version_id = null;
            var prev_version = null;
            if (version.indexOf('r') > -1) {
                root_version = version.substr(0, version.indexOf('r'));
            }
            for (var i = 0; i < versions.length; i++) {
                if (versions[i].name == root_version) {
                    version_id = versions[i].id;
                    prev_version = versions[i - 1].name;
                    break;
                }
            }
            if (!version_id) {
                fatal('Cannot find version ID number in JIRA related to "root" version string: ' + version);
            }
            createReleaseBug(version, root_version, prev_version, version_id, argv.username, argv.password, component_map,
                             argv.pretend);
        });
    });
}

function main() {
    var commandList = [
        {
            name: 'repo-clone',
            desc: 'Clones git repositories into the current working directory.',
            entryPoint: repoCloneCommand
        }, {
            name: 'repo-update',
            desc: 'Performs git pull --rebase on all specified repositories.',
            entryPoint: repoUpdateCommand
        }, {
            name: 'repo-reset',
            desc: 'Performs git reset --hard origin/$BRANCH on all specified repositories.',
            entryPoint: repoResetCommand
        }, {
            name: 'repo-status',
            desc: 'Lists changes that exist locally but have not yet been pushed.',
            entryPoint: repoStatusCommand
        }, {
            name: 'repo-push',
            desc: 'Push changes that exist locally but have not yet been pushed.',
            entryPoint: repoPushCommand
        }, {
            name: 'list-repos',
            desc: 'Shows a list of valid values for the --repo flag.',
            entryPoint: listReposCommand
        }, {
            name: 'prepare-release-branch',
            desc: 'Branches, updates JS, updates VERSION. Safe to run multiple times.',
            entryPoint: prepareReleaseBranchCommand
        }, {
            name: 'tag-release',
            desc: 'Tags repos for a release.',
            entryPoint: tagReleaseBranchCommand
        }, {
            name: 'audit-license-headers',
            desc: 'Uses Apache RAT to look for missing license headers.',
            entryPoint: ratCommand
        }, {
            name: 'create-release-snapshot',
            desc: 'Creates a signed .zip that consitutes a release.',
            entryPoint: createReleaseCommand
        }, {
            name: 'create-release-bug',
            desc: 'Creates a bug in JIRA for tracking the tasks involved in a new release',
            entryPoint: createReleaseBugCommand
        }, {
            name: 'upload-release',
            desc: 'Uploads a signed .zip to Cordova\'s webserver.',
            entryPoint: apacheUpload
        }, {
            name: 'foreach',
            desc: 'Runs a shell command in each repo.',
            entryPoint: repoPerformShellCommand
        }
    ];
    var commandMap = {};
    for (var i = 0; i < commandList.length; ++i) {
        commandMap[commandList[i].name] = commandList[i];
    }
    var usage = 'Usage: $0 command [options]\n' +
               '\n' +
               'Valid commands:\n';
    for (var i = 0; i < commandList.length; ++i) {
        usage += '    ' + commandList[i].name + ': ' + commandList[i].desc + '\n';
    }
    usage += '\nFor help on a specific command: $0 command --help';

    var command;
    var argv = optimist
        .usage(usage)
        .check(function(argv) {
            command = argv._[0];
            if (!command) {
                throw 'No command specified.';
            }
            if (!commandMap[command]) {
                throw 'Unknown command: ' + command;
            }
        }).argv;

    // ShellJS opens a lot of file handles, and the default on OS X is too small.
    var ulimit = execHelper('ulimit -S -n', true, true);
    if (ulimit && ulimit < 2000) {
        execHelper('/bin/bash -c \'ulimit -S -n 4096; exec "' + process.argv[0] + '" "' + process.argv.slice(1).join('" "') + '" --ulimit\'', 2);
        return;
    }

    commandMap[command].entryPoint();
}
main();
