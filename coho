#!/usr/bin/env node
/*
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
	distributed with this work for additional information
   	regarding copyright ownership.  The ASF licenses this file
	to you under the Apache License, Version 2.0 (the
	"License"); you may not use this file except in compliance
	with the License.  You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an
	"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, either express or implied.  See the License for the
	specific language governing permissions and limitations
	under the License.
*/
COMMAND = process.argv[2]
if (!COMMAND) {
    COMMAND = "all";
}
VERSION = process.argv[3]
if (!VERSION){
    VERSION = '2.3.0';
}
OLDVER         = process.argv[4]

var util           = require('util')
,   exec           = require('child_process').exec
,   fs             = require('fs')
,   shjs           = require('shelljs')
,   tempRepoDir    = 'temp/repositories'
,   releaseSrcDir  = '../../release/src/cordova-'+VERSION
,   repoCount      = 0
,   tracker        = 0
,   cordovaSrcZip  = "cordova-"+VERSION+"-src.zip"
,   cordovaSrcAsc  = cordovaSrcZip+".asc"
,   cordovaSrcMd5  = cordovaSrcZip+".md5"
,   cordovaSrcSha  = cordovaSrcZip+".sha";



var platformDict = {
  "iOS" : ['https://git-wip-us.apache.org/repos/asf/cordova-ios.git','cordova-ios'],
  "Android":['https://git-wip-us.apache.org/repos/asf/cordova-android.git', 'cordova-android'],
  "BlackBerry":['https://git-wip-us.apache.org/repos/asf/cordova-blackberry.git', 'cordova-blackberry'],
  "Windows":['https://git-wip-us.apache.org/repos/asf/cordova-windows.git', 'cordova-windows'],
  "Windows Phone 7":['https://git-wip-us.apache.org/repos/asf/cordova-wp7.git', 'cordova-wp7'],
  "Windows Phone 8":['https://git-wip-us.apache.org/repos/asf/cordova-wp8.git', 'cordova-wp8'],
  "Bada":['https://git-wip-us.apache.org/repos/asf/cordova-bada.git', 'cordova-bada'],
  "BadaWac":['https://git-wip-us.apache.org/repos/asf/cordova-bada-wac.git', 'cordova-bada-wac'],
  "WebOS":['https://git-wip-us.apache.org/repos/asf/cordova-webos.git', 'cordova-webos'],
  "Tizen":['https://git-wip-us.apache.org/repos/asf/cordova-tizen.git', 'cordova-tizen'],
  "QT":['https://git-wip-us.apache.org/repos/asf/cordova-qt.git', 'cordova-qt'],
  "OSX":['https://git-wip-us.apache.org/repos/asf/cordova-osx.git', 'cordova-osx'],
  "Docs":['https://git-wip-us.apache.org/repos/asf/cordova-docs.git', 'cordova-docs'],
  "MobileSpec":['https://git-wip-us.apache.org/repos/asf/cordova-mobile-spec.git', 'cordova-mobile-spec'],
  "CordovaJS":['https://git-wip-us.apache.org/repos/asf/cordova-js.git', 'cordova-js'],
  "Hello World App":['https://git-wip-us.apache.org/repos/asf/cordova-app-hello-world.git', 'cordova-app-hello-world']
};



//shjs.echo(shjs.ls('.'))

//prep function
function prep(){
    //remove old folders and create new ons
    shjs.rm('-rf', 'temp')
    shjs.mkdir('-p', ['temp/repositories','temp/release/src/cordova-'+VERSION])
    
    //set working directory 
    shjs.cd(tempRepoDir)
    
    //copy keys into top level directory
    console.log('Moving KEYS file to release');
    shjs.cp('../../KEYS', '../release/KEYS');

    //copy notice, license, readme, disclaimer file to be put into official release artifact
    console.log('Moving notice, license, readme, and disclaimer files to release artifact');
    shjs.cp('../../bin/*', '../release/src/cordova-'+VERSION);

    // count the number of repo's dynamically instead of hardcoding
    for(key in platformDict) {
      repoCount++;
    }
    
    //git clone & checkout version
    tracker = 0;
    for(key in platformDict){
        console.log('Cloning ' + key + ' (in parallel)...');
        shjs.exec("git clone "+platformDict[key][0]+" && cd "+platformDict[key][1]+" && git fetch --tags && git checkout "+VERSION, {async:true, silent:true}, function(code, output) {
            if (code != 0) {
              console.log("Error cloning: " + output);
              shjs.exit(1);
            }
            tracker +=1;
            console.log("Cloned " + tracker + " of " + repoCount);
            if (tracker == repoCount){
                repoZip();
            }
    	});   
    }
}

//zip repos into release directory
function repoZip(){
    console.log("Zipping content...");
    tracker = 0;
    for(key in platformDict){
        shjs.exec("cd " + platformDict[key][1] + " && git archive --format zip -o " + releaseSrcDir+"/"+platformDict[key][1]+".zip "+VERSION, {async:true}, function(code, output){
            if (code != 0) {
                console.log("Error zipping: " + output);
                shjs.exit(2);
            }
            tracker += 1;
            if (tracker == repoCount){
                changelog();
            }
        });
    }
}

//generates the changelog
function changelog(){
    if (OLDVER != undefined){
        console.log("Generating change logs...");
        //keeps track of directoires of created changelogs
        var tempArray = []
        shjs.exec('cd ../release/src/cordova-'+VERSION+' && echo "CHANGELOG" > changelog', {silent:true});
        tempArray.push('../release/src/cordova-'+VERSION+'/changelog');
        tracker = 0;
        for(key in platformDict){
            tempArray.push(platformDict[key][1]+'/changelog');
            shjs.exec("cd "+platformDict[key][1]+" && echo '\n"+key+" \n---\n' > changelog && git log --format='%h %s' "+OLDVER+".."+VERSION+" >> changelog", {async:true, silent:false}, function(code, output){
                if (code != 0) {
                    console.log("Error generating changelog: " + output);
                    // keep on going even is there is an error
                }
                tracker +=1;
                if (tracker === repoCount){
                    //concatenate all changelogs to one changelog 
                    shjs.cat(tempArray).to('../release/src/cordova-'+VERSION+'/changelog');
                    if (COMMAND.toLowerCase() === 'all' || COMMAND.toLowerCase() === 'sign' ){
                        signZip();
                    }
                }
            });
        }
    }
}   

// zip and sign cordova release folder
function signZip(){
    if (COMMAND.toLowerCase() === 'sign'){
        //set working directory 
        shjs.cd(tempRepoDir)
    }
    console.log('Zipping and signing src');
    shjs.exec("cd ../release/src && zip -rq "+ cordovaSrcZip +" * && gpg --armor --output "+cordovaSrcAsc+" --detach-sig "+cordovaSrcZip+" && gpg --print-md MD5 "+cordovaSrcZip+" > " + cordovaSrcMd5 +" && gpg --print-md SHA512 " + cordovaSrcZip + " > " + cordovaSrcSha, {async:true}, function(){
        console.log("Created temp/release/src/"+cordovaSrcZip+" with corresponding asc, md5, and sha files.");
    });
}

if (COMMAND.toLowerCase() === 'all' || COMMAND.toLowerCase() === 'build' ){
    prep();
}else if(COMMAND.toLowerCase() === 'sign'){
    signZip();
}else{
    console.log("Incorrect Arguments, please review the readme!");
}
